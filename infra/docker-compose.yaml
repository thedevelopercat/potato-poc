networks:
  stack:
    name: ${PREFIX?error}_vnet

volumes:
  loki:
  grafana:
  pgsql:
  pgsql_dumps:
  app:
  prometheus:

services:
  # applications containers
  application:
    image: "${APP_IMAGE?error}"
    container_name: "${PREFIX?error}app"
    restart: unless-stopped
    env_file:
      - ./env/pgsql/pgsql.shared.env
      - ./env/${APP_NAME}/${APP_NAME}.env
      - ./env/${APP_NAME}/${APP_NAME}.override.env
    depends_on:
      - loki
      - promtail
      - traefik
      - pgsql
    volumes:
      - ./data/${APP_NAME}/logs:/var/log/${APP_NAME}:rw
    networks:
      - stack

  # reverse proxy
  traefik:
    image: "traefik:v3.2"
    container_name: "${PREFIX?error}traefik"
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./config/traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./config/traefik/dynamic:/etc/traefik/dynamic:ro
      - ./data/traefik/logs:/var/log/traefik:rw
    networks:
      - stack

  # logging containers
  loki:
    image: grafana/loki:3.3.2
    container_name: "${PREFIX?error}loki"
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    user: root
    volumes:
      - ./config/loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki:/data
    networks:
      - stack

  promtail:
    image: grafana/promtail:2.9.2
    container_name: "${PREFIX?error}promtail"
    restart: unless-stopped
    depends_on:
      - loki
    volumes:
      # configuration mapping
      - ./config/promtail/config.yaml:/etc/promtail/config.yml:ro
      # log file(s) ingestion
      - ./data/${APP_NAME}/logs:/var/log/${APP_NAME}:ro
      - ./data/pgsql/logs:/var/log/pgsql:ro
      - ./data/traefik/logs:/var/log/traefik:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - stack

  # data visualization containers
  grafana:
    image: grafana/grafana:11.4.0
    container_name: "${PREFIX?error}grafana"
    restart: unless-stopped
    depends_on:
      - loki
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - /run.sh
    volumes:
      - ./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/ds.yaml:ro
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana:/var/lib/grafana
    networks:
      - stack

  # databases containers
  pgsql:
    image: postgres:17-alpine
    container_name: "${PREFIX?error}pgsql"
    restart: unless-stopped
    command: postgres -c logging_collector=on -c log_directory=pg_log -c log_statement=all
    labels:
      - docker-volume-backup.archive-pre=/bin/sh /tmp/scripts/backup.sh
      - docker-volume-backup.exec-label=pgsql_database
    env_file:
      - ./env/pgsql/pgsql.env
      - ./env/pgsql/pgsql.shared.env
    volumes:
      # data persistence
      - pgsql:/var/lib/postgresql/data
      - pgsql_dumps:/tmp/pgsql_dumps
      # logs
      - ./data/pgsql/logs:/var/lib/postgresql/data/pg_log:rw
      # scripts
      - ./config/pgsql/scripts:/tmp/scripts:ro
    networks:
      - stack
  
  # backup containers
  offen:
    image: offen/docker-volume-backup:v2.43.0
    container_name: "${PREFIX?error}offen"
    restart: unless-stopped
    depends_on:
      - pgsql
      - grafana
      - loki
      - application
    env_file:
      - ./env/offen/offen.env
      - ./env/offen/offen.override.env
    volumes:
      # volumes to back up
      - pgsql_dumps:/backup/pgsql_dumps:ro
      - grafana:/backup/grafana:ro
      - loki:/backup/loki:ro
      - app:/backup/app:ro
      # configuration
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/offen/backup:/archive:rw
      - ./config/offen:/etc/dockervolumebackup/conf.d:ro
      # timezone
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - stack

  # metrics containers
  pgqsl_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.11.1
    container_name: "${PREFIX?error}pgsql_exporter"
    restart: unless-stopped
    env_file:
      - ./env/pgqsl_exporter/exporter.env
      - ./env/pgqsl_exporter/exporter.override.env
    networks:
      - stack
  
  prometheus:
    image: prom/prometheus:v3.0.1
    container_name: "${PREFIX?error}prometheus"
    restart: unless-stopped
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # should be enable only if direct access is needed to the web UI
      # this will break the data source connection in grafana
      # - '--web.external-url=/prometheus/'
      # - '--web.route-prefix=/prometheus/'
    volumes:
      # configuration
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # data persitence
      - prometheus:/prometheus:rw
    networks:
      - stack